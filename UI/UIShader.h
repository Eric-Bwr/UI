#pragma once

const char* UIQuadShaderVertex = "#version 430 core\n"
                                 "\n"
                                 "layout (location = 0) in vec2 inPosition;\n"
                                 "layout (location = 1) in vec2 inTexture;\n"
                                 "layout (location = 2) in float inRounding;\n"
                                 "layout (location = 3) in vec4 inInfo;\n"
                                 "\n"
                                 "out vec4 info;\n"
                                 "out vec2 textureCoords;\n"
                                 "out vec2 roundingCoords;\n"
                                 "out float corners;\n"
                                 "\n"
                                 "const vec2 textureData[4] = {\n"
                                 "    vec2(0, 0),\n"
                                 "    vec2(1, 0),\n"
                                 "    vec2(0, 1),\n"
                                 "    vec2(1, 1)\n"
                                 "};\n"
                                 "uniform mat4 ortho;\n"
                                 "\n"
                                 "void main() {\n"
                                 "    gl_Position = ortho * vec4(inPosition, 0.0, 1.0);\n"
                                 "    textureCoords = inTexture;\n"
                                 "    roundingCoords = textureData[gl_VertexID] * inInfo.zw;\n"
                                 "    corners = inRounding;\n"
                                 "    info = inInfo;\n"
                                 "}";

const char* UIQuadShaderFragment = "#version 400 core\n"
                                   "\n"
                                   "in vec4 info;\n"
                                   "in vec2 textureCoords;\n"
                                   "in vec2 roundingCoords;\n"
                                   "in float corners;\n"
                                   "\n"
                                   "uniform float smoothness;\n"
                                   "uniform vec4 color;\n"
                                   "uniform sampler2D image;\n"
                                   "\n"
                                   "out vec4 FragColor;\n"
                                   "\n"
                                   "float roundCorners(float alpha){\n"
                                   "    vec4 radii = vec4(int(corners) >> 3 & 1, int(corners) >> 2 & 1, int(corners) & 1, int(corners) >> 1 & 1) * info.y;\n"
                                   "    float yMaxY = info.w - radii.y;\n"
                                   "    float xMaxZ = info.z - radii.z;\n"
                                   "    float yMaxZ = info.w - radii.z;\n"
                                   "    float xMaxW = info.z - radii.w;\n"
                                   "    if (roundingCoords.x < radii.x && roundingCoords.y < radii.x)\n"
                                   "        alpha *= 1.0 - smoothstep(radii.x - smoothness, radii.x + smoothness, length(roundingCoords - vec2(radii.x)));\n"
                                   "    else if (roundingCoords.x < radii.y && roundingCoords.y > yMaxY)\n"
                                   "        alpha *= 1.0 - smoothstep(radii.y - smoothness, radii.y + smoothness, length(roundingCoords - vec2(radii.y, yMaxY)));\n"
                                   "    else if (roundingCoords.x > xMaxZ && roundingCoords.y > yMaxZ)\n"
                                   "        alpha *= 1.0 - smoothstep(radii.z - smoothness, radii.z + smoothness, length(roundingCoords - vec2(xMaxZ, yMaxZ)));\n"
                                   "    else if (roundingCoords.x > xMaxW && roundingCoords.y < radii.w)\n"
                                   "        alpha *= 1.0 - smoothstep(radii.w - smoothness, radii.w + smoothness, length(roundingCoords - vec2(xMaxW, radii.w)));\n"
                                   "    return alpha;\n"
                                   "}\n"
                                   "\n"
                                   "void main() {\n"
                                   "    if (info.x == 0 || info.x == 1)\n"
                                   "        FragColor = color;\n"
                                   "    else if (info.x == 2)\n"
                                   "        FragColor = texture(image, textureCoords);\n"
                                   "    else if (info.x == 3)\n"
                                   "        FragColor = texture(image, textureCoords) * color;\n"
                                   "    FragColor = vec4(FragColor.rgb, roundCorners(FragColor.a));\n"
                                   "}";

const char* UITextShaderVertex = "#version 330 core\n"
                                 "\n"
                                 "layout (location = 0) in vec2 inPosition;\n"
                                 "layout (location = 1) in vec2 inTexture;\n"
                                 "layout (location = 2) in float inLevel;\n"
                                 "\n"
                                 "uniform mat4 ortho;\n"
                                 "\n"
                                 "out vec2 textureCoords;\n"
                                 "out float level;\n"
                                 "\n"
                                 "void main() {\n"
                                 "    gl_Position = ortho * vec4(inPosition, 0.0, 1.0);\n"
                                 "    textureCoords = inTexture;\n"
                                 "    level = inLevel;\n"
                                 "}";

const char* UITextShaderFragment = "#version 330 core\n"
                                   "\n"
                                   "in vec2 textureCoords;\n"
                                   "in float level;\n"
                                   "\n"
                                   "uniform sampler2DArray image;\n"
                                   "uniform vec4 color;\n"
                                   "\n"
                                   "out vec4 FragColor;\n"
                                   "\n"
                                   "void main() {\n"
                                   "    FragColor = vec4(color.rgb, texture(image, vec3(textureCoords, level - 32)).r * color.a);\n"
                                   "}";

const char* UICircularShaderFragment = "#version 430 core\n"
                                       "\n"
                                       "#define M_PI 3.1415926535897932384626433832795\n"
                                       "\n"
                                       "in vec4 info;\n"
                                       "in vec2 textureCoords;\n"
                                       "in vec2 roundingCoords;\n"
                                       "in float corners;\n"
                                       "\n"
                                       "uniform float smoothness;\n"
                                       "uniform vec4 color;\n"
                                       "uniform sampler2D image;\n"
                                       "uniform vec4 arcs;\n"
                                       "uniform vec4 diameters;\n"
                                       "uniform float lineThickness;\n"
                                       "uniform float progress;\n"
                                       "uniform vec2 needleDot;\n"
                                       "uniform vec4 lineColor;\n"
                                       "uniform vec4 dotColor;\n"
                                       "uniform vec4 colorAngle1;\n"
                                       "uniform vec4 colorAngle2;\n"
                                       "uniform vec4 colorAngle3;\n"
                                       "\n"
                                       "out vec4 FragColor;\n"
                                       "\n"
                                       "float roundCorners(float alpha){\n"
                                       "    vec4 radii = vec4(int(corners) >> 3 & 1, int(corners) >> 2 & 1, int(corners) & 1, int(corners) >> 1 & 1) * info.y;\n"
                                       "    float yMaxY = info.w - radii.y;\n"
                                       "    float xMaxZ = info.z - radii.z;\n"
                                       "    float yMaxZ = info.w - radii.z;\n"
                                       "    float xMaxW = info.z - radii.w;\n"
                                       "    if (roundingCoords.x < radii.x && roundingCoords.y < radii.x)\n"
                                       "        alpha *= 1.0 - smoothstep(radii.x - smoothness, radii.x + smoothness, length(roundingCoords - vec2(radii.x)));\n"
                                       "    else if (roundingCoords.x < radii.y && roundingCoords.y > yMaxY)\n"
                                       "        alpha *= 1.0 - smoothstep(radii.y - smoothness, radii.y + smoothness, length(roundingCoords - vec2(radii.y, yMaxY)));\n"
                                       "    else if (roundingCoords.x > xMaxZ && roundingCoords.y > yMaxZ)\n"
                                       "        alpha *= 1.0 - smoothstep(radii.z - smoothness, radii.z + smoothness, length(roundingCoords - vec2(xMaxZ, yMaxZ)));\n"
                                       "    else if (roundingCoords.x > xMaxW && roundingCoords.y < radii.w)\n"
                                       "        alpha *= 1.0 - smoothstep(radii.w - smoothness, radii.w + smoothness, length(roundingCoords - vec2(xMaxW, radii.w)));\n"
                                       "    return alpha;\n"
                                       "}\n"
                                       "\n"
                                       "float drawLine(vec2 p1, vec2 p2, vec2 uv) {\n"
                                       "    float a = abs(distance(p1, uv));\n"
                                       "    float b = abs(distance(p2, uv));\n"
                                       "    float c = abs(distance(p1, p2));\n"
                                       "\n"
                                       "    if (a >= c || b >=  c)\n"
                                       "        return 0.0;\n"
                                       "    float p = (a + b + c) * 0.5;\n"
                                       "    float h = 2 / c * sqrt(p * (p - a) * (p - b) * (p - c));\n"
                                       "\n"
                                       "    return mix(1.0, 0.0, smoothstep(0.5 * lineThickness, 1.5 * lineThickness, h));\n"
                                       "}\n"
                                       "\n"
                                       "float istep(float edge, float x){\n"
                                       "    return x > edge ? 0.0 : 1.0;\n"
                                       "}\n"
                                       "\n"
                                       "void main() {\n"
                                       "    if (info.x == 0 || info.x == 1)\n"
                                       "        FragColor = color;\n"
                                       "    else if (info.x == 2)\n"
                                       "        FragColor = texture(image, textureCoords);\n"
                                       "    else if (info.x == 3)\n"
                                       "        FragColor = texture(image, textureCoords) * color;\n"
                                       "    FragColor = vec4(FragColor.rgb, roundCorners(FragColor.a));\n"
                                       "\n"
                                       "    vec2 uv = textureCoords;\n"
                                       "    uv.y = 1.0 - uv.y;\n"
                                       "    uv = uv * 2.0 - 1.0;\n"
                                       "    float distance = sqrt(dot(uv, uv));\n"
                                       "\n"
                                       "    float ODC = smoothstep(diameters.x, diameters.x - 0.01, distance);\n"
                                       "    float IDC = smoothstep(diameters.y, diameters.y + 0.01, distance);\n"
                                       "    float circleAlpha = ODC * IDC;\n"
                                       "    float circleAngle = (atan(uv.x, uv.y) + M_PI) / (M_PI * 2);\n"
                                       "    float blendStrength = circleAngle * 0.35;\n"
                                       "    if(circleAlpha > 0.001){\n"
                                       "        float alpha1 = step(arcs.x, circleAngle) * (1.0 - smoothstep(arcs.x + blendStrength, arcs.y + blendStrength, circleAngle));\n"
                                       "        float alpha2 = (smoothstep(arcs.y - blendStrength, arcs.z - blendStrength, circleAngle)) * (1.0 - smoothstep(arcs.y + blendStrength, arcs.z + blendStrength, circleAngle));\n"
                                       "        float alpha3 = (smoothstep(arcs.z - blendStrength, arcs.w - blendStrength, circleAngle)) * istep(arcs.w, circleAngle);\n"
                                       "        FragColor = mix(FragColor, colorAngle1, alpha1 * circleAlpha);\n"
                                       "        FragColor = mix(FragColor, colorAngle2, alpha2 * circleAlpha);\n"
                                       "        FragColor = mix(FragColor, colorAngle3, alpha3 * circleAlpha);\n"
                                       "    }\n"
                                       "\n"
                                       "    ODC = smoothstep(diameters.z, diameters.z - 0.01, distance);\n"
                                       "    IDC = smoothstep(diameters.w, diameters.w + 0.01, distance);\n"
                                       "    circleAlpha = ODC * IDC;\n"
                                       "    blendStrength = circleAngle * 0.35;\n"
                                       "    if(circleAlpha > 0.001){\n"
                                       "        float alpha0 = step(arcs.x, circleAngle) * istep(progress, circleAngle);\n"
                                       "\n"
                                       "        float alpha1 = step(arcs.x, circleAngle) * (1.0 - smoothstep(arcs.x + blendStrength, arcs.y + blendStrength, circleAngle));\n"
                                       "        float alpha2 = (smoothstep(arcs.y - blendStrength, arcs.z - blendStrength, circleAngle)) * (1.0 - smoothstep(arcs.y + blendStrength, arcs.z + blendStrength, circleAngle));\n"
                                       "        float alpha3 = (smoothstep(arcs.z - blendStrength, arcs.w - blendStrength, circleAngle)) * istep(arcs.w, circleAngle);\n"
                                       "\n"
                                       "        vec4 innerColor = FragColor;\n"
                                       "        innerColor = mix(innerColor, colorAngle1, alpha1 * circleAlpha);\n"
                                       "        innerColor = mix(innerColor, colorAngle2, alpha2 * circleAlpha);\n"
                                       "        innerColor = mix(innerColor, colorAngle3, alpha3 * circleAlpha);\n"
                                       "\n"
                                       "        FragColor = mix(FragColor, innerColor, alpha0);\n"
                                       "    }\n"
                                       "    if(lineThickness != 0.0){\n"
                                       "        float lineAngle = (-M_PI * progress * 2) - M_PI / 2.0;\n"
                                       "        vec2 linePos = vec2(diameters.z * cos(lineAngle), diameters.z * sin(lineAngle));\n"
                                       "        float line = drawLine(vec2(0.0), linePos, uv);\n"
                                       "        FragColor = mix(FragColor, lineColor, line);\n"
                                       "\n"
                                       "        float dotAlpha = 1.0 - smoothstep(needleDot.x, needleDot.y, distance);\n"
                                       "        FragColor = mix(FragColor, dotColor, dotAlpha);\n"
                                       "    }\n"
                                       "}";